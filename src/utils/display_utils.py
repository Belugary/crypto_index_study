#!/usr/bin/env python3
"""
Êï∞ÊçÆÂ±ïÁ§∫Â∑•ÂÖ∑Ê®°Âùó

Êèê‰æõÁªü‰∏ÄÁöÑÂä†ÂØÜË¥ßÂ∏ÅÊï∞ÊçÆÊ†ºÂºèÂåñÂíåÂ±ïÁ§∫ÊñπÊ≥ïÔºåÁ°Æ‰øùË°®Ê†ºÊòæÁ§∫ÁöÑ‰∏ÄËá¥ÊÄßÂíåÁæéËßÇÊÄß„ÄÇ
‰∏ìÊ≥®‰∫éÊï∞ÊçÆÂ±ïÁ§∫ÔºåÊï∞ÊçÆËé∑ÂèñÁî±Â§ñÈÉ®ÂÆåÊàê„ÄÇ
"""

import pandas as pd
from typing import List, Optional, Dict, Any
from pathlib import Path

try:
    from IPython.display import display
    IPYTHON_AVAILABLE = True
except ImportError:
    IPYTHON_AVAILABLE = False


class CryptoDataDisplayer:
    """Âä†ÂØÜË¥ßÂ∏ÅÊï∞ÊçÆÂ±ïÁ§∫Â∑•ÂÖ∑Á±ª
    
    ‰∏ìÈó®Ë¥üË¥£Âä†ÂØÜË¥ßÂ∏ÅÊï∞ÊçÆÁöÑÊ∏ÖÁêÜ„ÄÅÊ†ºÂºèÂåñÂíåÂ±ïÁ§∫„ÄÇ
    ÈÅµÂæ™Âçï‰∏ÄËÅåË¥£ÂéüÂàôÔºöÂè™Â§ÑÁêÜÊï∞ÊçÆÂ±ïÁ§∫ÔºåÊï∞ÊçÆËé∑ÂèñÁî±Â§ñÈÉ®ÂÆåÊàê„ÄÇ
    
    ËÆæËÆ°ÂéüÂàôÔºö
    - Êï∞ÊçÆËé∑Âèñ‰∏éÂ±ïÁ§∫ÂàÜÁ¶ªÔºöÊú¨Á±ª‰∏ìÊ≥®‰∫éÊé•Êî∂Êï∞ÊçÆÂπ∂ËøõË°åÊ†ºÂºèÂåñÂ±ïÁ§∫
    - Áªü‰∏ÄÊ†ºÂºèÂåñÔºöÊèê‰æõ‰∏ÄËá¥ÁöÑÊï∞ÂÄºÊ†ºÂºèÂåñÂíåÂàóÂêçÊò†Â∞Ñ
    - ÁÅµÊ¥ªÈÖçÁΩÆÔºöÊîØÊåÅËá™ÂÆö‰πâÂàóÈÄâÊã©„ÄÅÊéíÂ∫èÂíåÊòæÁ§∫ÂèÇÊï∞
    - Jupyter‰ºòÂåñÔºöÂú®notebookÁéØÂ¢É‰∏≠Êèê‰æõÊúÄ‰Ω≥ÁöÑË°®Ê†ºÊòæÁ§∫ÊïàÊûú
    
    ‰∏ªË¶ÅÂäüËÉΩÔºö
    - Êï∞ÊçÆÊ∏ÖÁêÜÔºàÂéªÈô§Êó†ÊïàÊï∞ÊçÆ„ÄÅÂ§ÑÁêÜÁº∫Â§±ÂÄºÔºâ
    - Ê†ºÂºèÂåñÊòæÁ§∫Ôºà‰ª∑Ê†º„ÄÅÂ∏ÇÂÄºÁ≠âÊï∞ÂÄºÁöÑÊ†ºÂºèÂåñÔºâ
    - ÂàóÂêçÊú¨Âú∞ÂåñÔºàËã±ÊñáÂàóÂêçËΩ¨Êç¢‰∏∫‰∏≠ÊñáÊòæÁ§∫Ôºâ
    - Ë°®Ê†ºÂ±ïÁ§∫ÔºàÈÄÇÈÖçJupyterÁéØÂ¢ÉÁöÑË°®Ê†ºÊòæÁ§∫Ôºâ
    
    ‰ΩøÁî®Ê®°ÂºèÔºö
        # 1. Â§ñÈÉ®Ëé∑ÂèñÊï∞ÊçÆ
        raw_data = aggregator.get_daily_data('2024-01-15')
        
        # 2. ‰ΩøÁî®Â±ïÁ§∫Â∑•ÂÖ∑Â§ÑÁêÜÂíåÊòæÁ§∫
        displayer = CryptoDataDisplayer()
        clean_data = displayer.clean_data(raw_data)
        displayer.show_table(clean_data, top_n=10)
    """
    
    def __init__(self):
        """
        ÂàùÂßãÂåñÊï∞ÊçÆÂ±ïÁ§∫Âô®
        
        ÁßªÈô§‰∫ÜÊï∞ÊçÆËé∑ÂèñÁõ∏ÂÖ≥ÁöÑÂèÇÊï∞Ôºå‰∏ìÊ≥®‰∫éÊï∞ÊçÆÂ±ïÁ§∫ÂäüËÉΩ„ÄÇ
        Êï∞ÊçÆËé∑ÂèñÂ∫îËØ•Âú®Â§ñÈÉ®ÂÆåÊàêÔºåÊú¨Á±ªÂè™Ë¥üË¥£Êé•Êî∂ÂíåÂ±ïÁ§∫Êï∞ÊçÆ„ÄÇ
        """
        # Â∏ÅÁßçÂêçÁß∞‰øÆÊ≠£Êò†Â∞Ñ - ‰øÆÊ≠£‰∏Ä‰∫õÂ∏∏ËßÅÁöÑÊòæÁ§∫ÈóÆÈ¢ò
        self.name_corrections = {
            'XRP': 'Ripple',
            'BNB': 'Binance Coin'
        }
        
        # ÂàóÂêçÊò†Â∞ÑÔºàËã±Êñá -> ‰∏≠ÊñáÔºâ- Áªü‰∏ÄÁöÑÊú¨Âú∞ÂåñÊòæÁ§∫
        self.column_mapping = {
            'rank': 'ÊéíÂêç',
            'symbol': '‰ª£Á†Å',
            'name': 'Â∏ÅÁßçÂêçÁß∞', 
            'price': '‰ª∑Ê†º($)',
            # Â∏ÇÂÄºÊîπ‰∏∫ÊåâÂçÅ‰∫øÁæéÂÖÉ(1B$)‰∏∫Âçï‰ΩçÊòæÁ§∫
            'market_cap': 'Â∏ÇÂÄº(1B$)',
            'volume': 'Êàê‰∫§Èáè($)',
            # ÊùÉÈáçÂàóË°®Â§¥Â∑≤ÂåÖÂê´(%)ÔºåÂçïÂÖÉÊ†ºÂÜÖÈÉ®‰∏çÂÜçÈôÑÂä†ÁôæÂàÜÂè∑
            'weight': 'ÊùÉÈáç(%)',
            'change_24h': '24hÊ∂®Ë∑å(%)',
            'change_7d': '7dÊ∂®Ë∑å(%)'
        }
    
    def _add_metadata_fields(self, data: pd.DataFrame) -> pd.DataFrame:
        """Êô∫ËÉΩÂä†ËΩΩÂ∏ÅÁßçÂÖÉÊï∞ÊçÆÔºàsymbol Âíå nameÔºâÔºåÊîØÊåÅÂä®ÊÄÅË°•ÂÖÖ
        
        ‰ºòÂÖà‰ªéÂÖÉÊï∞ÊçÆÊñá‰ª∂Âä†ËΩΩÔºåÂ¶ÇÊûúÁº∫Â§±Âàô‰ªéÂ∏ÅÁßçCSVÊñá‰ª∂Ë°•ÂÖÖÂü∫Á°Ä‰ø°ÊÅØ„ÄÇ
        
        Args:
            data: ÂåÖÂê´ coin_id ÂàóÁöÑÊï∞ÊçÆDataFrame
            
        Returns:
            pd.DataFrame: ÂêàÂπ∂‰∫Ü symbol Âíå name Â≠óÊÆµÁöÑÊï∞ÊçÆ
        """
        try:
            # Â∞ùËØïÊâæÂà∞È°πÁõÆÊ†πÁõÆÂΩï
            current_path = Path.cwd()
            project_root = None
            
            # Âêë‰∏äÂØªÊâæÂåÖÂê´ data ÁõÆÂΩïÁöÑÁà∂ÁõÆÂΩï
            for parent in [current_path] + list(current_path.parents):
                if (parent / 'data' / 'metadata').exists():
                    project_root = parent
                    break
            
            if project_root is None:
                print("‚ö†Ô∏è  Ë≠¶ÂëäÔºöÊú™ÊâæÂà∞È°πÁõÆÊ†πÁõÆÂΩïÔºåÊó†Ê≥ïÂä†ËΩΩÂÖÉÊï∞ÊçÆ")
                return self._add_basic_metadata_from_files(data, None)
                
            metadata_path = project_root / 'data' / 'metadata' / 'native_coins.csv'
            coins_path = project_root / 'data' / 'coins'
            
            # Âä†ËΩΩÁé∞ÊúâÂÖÉÊï∞ÊçÆ
            if metadata_path.exists():
                metadata = pd.read_csv(metadata_path)[['coin_id', 'name', 'symbol']]
                total_metadata_count = len(metadata)
                print(f"üìö Âä†ËΩΩÂÖÉÊï∞ÊçÆÂ∫ì: {total_metadata_count} ‰∏™Â∏ÅÁßçÔºàÂåÖÂê´ÊâÄÊúâÂàÜÁ±ªÔºâ")
            else:
                metadata = pd.DataFrame(columns=['coin_id', 'name', 'symbol'])
                total_metadata_count = 0
                print("üìö ÂÖÉÊï∞ÊçÆÊñá‰ª∂‰∏çÂ≠òÂú®ÔºåÂ∞Ü‰ªéÂ∏ÅÁßçÊñá‰ª∂Ë°•ÂÖÖ‰ø°ÊÅØ")
            
            # ÂêàÂπ∂Áé∞ÊúâÊï∞ÊçÆ
            merged_data = data.merge(metadata, on='coin_id', how='left')
            
            # ÁªüËÆ°ÂåπÈÖçÊÉÖÂÜµ
            matched_count = merged_data['symbol'].notna().sum()
            missing_count = len(merged_data) - matched_count
            print(f"üéØ Âú® {len(data)} ‰∏™ÂéüÁîü‰ª£Â∏Å‰∏≠ÂåπÈÖçÂà∞ {matched_count} ‰∏™Â∏ÅÁßçÁöÑÂêçÁß∞ÂíåÁ¨¶Âè∑")
            
            if missing_count > 0:
                print(f"‚ö†Ô∏è  {missing_count} ‰∏™ÂéüÁîü‰ª£Â∏ÅÂú®ÂÖÉÊï∞ÊçÆÂ∫ì‰∏≠Áº∫Â§±‰ø°ÊÅØ")
                merged_data = self._add_basic_metadata_from_files(merged_data, coins_path)
                
                # ÈáçÊñ∞ÁªüËÆ°
                new_matched_count = merged_data['symbol'].notna().sum()
                newly_added = new_matched_count - matched_count
                if newly_added > 0:
                    print(f"üìà ‰ªéÂ∏ÅÁßçÊñá‰ª∂Ë°•ÂÖÖ‰∫Ü {newly_added} ‰∏™Â∏ÅÁßçÁöÑÂü∫Á°Ä‰ø°ÊÅØ")
            
            return merged_data
            
        except Exception as e:
            print(f"‚ö†Ô∏è  Âä†ËΩΩÂÖÉÊï∞ÊçÆÊó∂Âá∫Èîô: {e}")
            return self._add_basic_metadata_from_files(data, None)
    
    def _add_basic_metadata_from_files(self, data: pd.DataFrame, coins_path: Optional[Path]) -> pd.DataFrame:
        """‰ªéÂ∏ÅÁßçCSVÊñá‰ª∂ÊèêÂèñÂü∫Á°ÄÂÖÉÊï∞ÊçÆ‰ø°ÊÅØ
        
        Args:
            data: ÂåÖÂê´ coin_id ÂàóÁöÑÊï∞ÊçÆDataFrame
            coins_path: Â∏ÅÁßçÊñá‰ª∂ÁõÆÂΩïË∑ØÂæÑÔºåÂ¶ÇÊûú‰∏∫NoneÂàôÂ∞ùËØïËá™Âä®ÊâæÂà∞
            
        Returns:
            pd.DataFrame: Ë°•ÂÖÖ‰∫ÜÂü∫Á°ÄÂÖÉÊï∞ÊçÆÁöÑÊï∞ÊçÆ
        """
        if coins_path is None:
            # Â∞ùËØïËá™Âä®ÊâæÂà∞coinsÁõÆÂΩï
            current_path = Path.cwd()
            for parent in [current_path] + list(current_path.parents):
                if (parent / 'data' / 'coins').exists():
                    coins_path = parent / 'data' / 'coins'
                    break
        
        if coins_path is None or not coins_path.exists():
            print("‚ö†Ô∏è  Êú™ÊâæÂà∞Â∏ÅÁßçÊñá‰ª∂ÁõÆÂΩïÔºåÊó†Ê≥ïË°•ÂÖÖÂÖÉÊï∞ÊçÆ")
            return data
        
        # ‰∏∫Áº∫Â§±ÂÖÉÊï∞ÊçÆÁöÑÂ∏ÅÁßçË°•ÂÖÖÂü∫Á°Ä‰ø°ÊÅØ
        # Â¶ÇÊûúÊï∞ÊçÆ‰∏≠ËøòÊ≤°ÊúâsymbolÂíånameÂàóÔºåÂÖàÂàõÂª∫Á©∫Âàó
        if 'symbol' not in data.columns:
            data['symbol'] = pd.NA
        if 'name' not in data.columns:
            data['name'] = pd.NA
            
        missing_mask = data['symbol'].isna() | data['name'].isna()
        missing_coins = data[missing_mask]['coin_id'].unique()
        
        print(f"üîç Ê£ÄÊü• {len(missing_coins)} ‰∏™Áº∫Â§±ÂÖÉÊï∞ÊçÆÁöÑÂ∏ÅÁßç...")
        
        Ë°•ÂÖÖ‰ø°ÊÅØ = []
        ÊàêÂäüËÆ°Êï∞ = 0
        
        for coin_id in missing_coins:
            coin_file = coins_path / f"{coin_id}.csv"
            if coin_file.exists():
                try:
                    # ËØªÂèñCSVÊñá‰ª∂ÁöÑÁ¨¨‰∏ÄË°åÊï∞ÊçÆÔºàÈÄöÂ∏∏ÂåÖÂê´ÊúÄÊñ∞‰ø°ÊÅØÔºâ
                    coin_data = pd.read_csv(coin_file, nrows=1)
                    if not coin_data.empty and 'symbol' in coin_data.columns and 'name' in coin_data.columns:
                        symbol = coin_data['symbol'].iloc[0]
                        name = coin_data['name'].iloc[0]
                        if pd.notna(symbol) and pd.notna(name):
                            Ë°•ÂÖÖ‰ø°ÊÅØ.append({
                                'coin_id': coin_id,
                                'symbol': symbol,
                                'name': name
                            })
                            ÊàêÂäüËÆ°Êï∞ += 1
                except Exception as e:
                    # ÈùôÈªòÂøΩÁï•Âçï‰∏™Êñá‰ª∂ËØªÂèñÈîôËØØ
                    continue
        
        print(f"üìÅ ‰ªéÂ∏ÅÁßçÊñá‰ª∂‰∏≠ÊâæÂà∞ {ÊàêÂäüËÆ°Êï∞} ‰∏™Â∏ÅÁßçÁöÑÂÆåÊï¥‰ø°ÊÅØ")
        
        # Â¶ÇÊûúÊâæÂà∞Ë°•ÂÖÖ‰ø°ÊÅØÔºåÊõ¥Êñ∞Êï∞ÊçÆ
        if Ë°•ÂÖÖ‰ø°ÊÅØ:
            Ë°•ÂÖÖdf = pd.DataFrame(Ë°•ÂÖÖ‰ø°ÊÅØ)
            
            # Êõ¥Êñ∞Áº∫Â§±ÁöÑÂ≠óÊÆµ
            for _, row in Ë°•ÂÖÖdf.iterrows():
                coin_id = row['coin_id']
                mask = (data['coin_id'] == coin_id)
                
                # Êõ¥Êñ∞symbolÂ≠óÊÆµÔºàÂ¶ÇÊûúÁº∫Â§±Ôºâ
                symbol_na_mask = mask & data['symbol'].isna()
                if symbol_na_mask.any():
                    data.loc[symbol_na_mask, 'symbol'] = row['symbol']
                
                # Êõ¥Êñ∞nameÂ≠óÊÆµÔºàÂ¶ÇÊûúÁº∫Â§±Ôºâ
                name_na_mask = mask & data['name'].isna()
                if name_na_mask.any():
                    data.loc[name_na_mask, 'name'] = row['name']
        
        return data
    
    def clean_data(self, raw_data: pd.DataFrame, 
                   target_columns: Optional[List[str]] = None) -> pd.DataFrame:
        """Ê∏ÖÁêÜÂíåÈ¢ÑÂ§ÑÁêÜÂéüÂßãÊï∞ÊçÆ
        
        ÂØπ‰º†ÂÖ•ÁöÑÂéüÂßãÊï∞ÊçÆËøõË°åÊ∏ÖÁêÜÂíåÈ¢ÑÂ§ÑÁêÜÔºåÂåÖÊã¨Ôºö
        1. ÂéªÈô§Êó†ÊïàÊï∞ÊçÆÔºàÁº∫Â§±ÂÖ≥ÈîÆÂ≠óÊÆµÁöÑËÆ∞ÂΩïÔºâ
        2. Êï∞ÊçÆÁ±ªÂûãËΩ¨Êç¢ÂíåÊ†ºÂºèÊ†áÂáÜÂåñ
        3. Â∏ÅÁßçÂêçÁß∞‰øÆÊ≠£
        4. ÂàóÁ≠õÈÄâÂíåÈáçÊéíÂ∫è
        
        Args:
            raw_data: ÂéüÂßãÊï∞ÊçÆDataFrame
            target_columns: ÁõÆÊ†áÂàóÂêçÂàóË°®ÔºåÂ¶ÇÊûú‰∏∫NoneÂàô‰øùÁïôÊâÄÊúâÊúâÊïàÂàó
                          Â∏∏Áî®ÂàóÂêçÔºörank, symbol, name, price, market_cap, volume, change_24hÁ≠â
        
        Returns:
            pd.DataFrame: Ê∏ÖÁêÜÂêéÁöÑÊï∞ÊçÆ
            
        Examples:
            >>> displayer = CryptoDataDisplayer()
            >>> clean_data = displayer.clean_data(raw_data, ['rank', 'symbol', 'name', 'price'])
        """
        if raw_data.empty:
            print("‚ö†Ô∏è  Ë≠¶ÂëäÔºöËæìÂÖ•Êï∞ÊçÆ‰∏∫Á©∫")
            return pd.DataFrame()
        
        print(f"üìä ÂºÄÂßãÊ∏ÖÁêÜÊï∞ÊçÆ: {len(raw_data)} Ë°å")
        
        # ÂàõÂª∫Êï∞ÊçÆÂâØÊú¨ÈÅøÂÖç‰øÆÊîπÂéüÂßãÊï∞ÊçÆ
        data = raw_data.copy()
        
        # Â¶ÇÊûúÊï∞ÊçÆÂè™Êúâ coin_id ‰ΩÜÊ≤°Êúâ symbol Âíå nameÔºå‰ªéÂÖÉÊï∞ÊçÆÂä†ËΩΩ
        if 'coin_id' in data.columns and ('symbol' not in data.columns or 'name' not in data.columns):
            data = self._add_metadata_fields(data)
        
        # ÂÜçÊ¨°Ê£ÄÊü•Âπ∂Â∞ùËØï‰ªécoin_idÁõ¥Êé•Ë°•ÂÖÖÁº∫Â§±ÁöÑÂÖÉÊï∞ÊçÆ
        if 'coin_id' in data.columns and ('symbol' in data.columns and 'name' in data.columns):
            missing_symbol = data['symbol'].isna().sum()
            missing_name = data['name'].isna().sum()
            if missing_symbol > 0 or missing_name > 0:
                print(f"üîÑ ‰ªçÊúâ {missing_symbol} ‰∏™symbolÂíå {missing_name} ‰∏™nameÁº∫Â§±ÔºåÂ∞ùËØïÊúÄÁªàË°•ÂÖÖ...")
                data = self._add_metadata_fields(data)
        
        # ÂéªÈô§ÂÖ≥ÈîÆÂ≠óÊÆµÁº∫Â§±ÁöÑËÆ∞ÂΩï
        essential_columns = ['symbol', 'name']
        available_essential = [col for col in essential_columns if col in data.columns]
        if available_essential:
            before_count = len(data)
            data = data.dropna(subset=available_essential)
            after_count = len(data)
            if before_count != after_count:
                print(f"üìù ÁßªÈô§‰∫Ü {before_count - after_count} ‰∏™Áº∫Â§±ÂÖ≥ÈîÆÂ≠óÊÆµÁöÑËÆ∞ÂΩï")
        
        # Â∫îÁî®Â∏ÅÁßçÂêçÁß∞‰øÆÊ≠£
        if 'name' in data.columns:
            for symbol, corrected_name in self.name_corrections.items():
                if 'symbol' in data.columns:
                    data.loc[data['symbol'] == symbol, 'name'] = corrected_name
        
        # Á≠õÈÄâÁõÆÊ†áÂàó
        if target_columns:
            available_columns = [col for col in target_columns if col in data.columns]
            if available_columns != target_columns:
                missing_columns = set(target_columns) - set(available_columns)
                print(f"‚ö†Ô∏è  Ë≠¶ÂëäÔºö‰ª•‰∏ãÂàó‰∏çÂ≠òÂú®‰∫éÊï∞ÊçÆ‰∏≠: {missing_columns}")
            data = data[available_columns]
        
        # ÈáçÊñ∞ËÆ°ÁÆóÊéíÂêçÔºàÈÅøÂÖçË∑≥Âè∑Ôºâ
        if 'rank' in data.columns and 'market_cap' in data.columns:
            # ÊåâÂ∏ÇÂÄºÈôçÂ∫èÈáçÊñ∞ÊéíÂêç
            data = data.sort_values('market_cap', ascending=False).reset_index(drop=True)
            data['rank'] = range(1, len(data) + 1)
            print(f"üìä ÈáçÊñ∞ËÆ°ÁÆóÊéíÂêç: 1-{len(data)}")
        
        print(f"‚úÖ Êï∞ÊçÆÊ∏ÖÁêÜÂÆåÊàê: {len(data)} Ë°åÔºå{len(data.columns)} Âàó")
        return data
    
    def format_crypto_data(self, data: pd.DataFrame, columns: Optional[List[str]] = None) -> pd.DataFrame:
        """Ê†ºÂºèÂåñÂä†ÂØÜË¥ßÂ∏ÅÊï∞ÊçÆÁî®‰∫éÂ±ïÁ§∫
        
        ÂØπÊ∏ÖÁêÜÂêéÁöÑÊï∞ÊçÆËøõË°åÊ†ºÂºèÂåñÔºåÂåÖÊã¨Ôºö
        1. ÂàóÈÄâÊã©ÂíåÈáçÊéíÂ∫è
        2. Êï∞ÂÄºÊ†ºÂºèÂåñÔºà‰ª∑Ê†º„ÄÅÂ∏ÇÂÄºÁ≠âÔºâ
        3. ÂàóÂêçÊú¨Âú∞ÂåñÔºàËã±ÊñáËΩ¨‰∏≠ÊñáÔºâ
        4. ÁôæÂàÜÊØîÂíåË¥ßÂ∏ÅÊ†ºÂºèÂåñ
        
        Args:
            data: Ê∏ÖÁêÜÂêéÁöÑÊï∞ÊçÆDataFrame
            columns: Ë¶ÅÊòæÁ§∫ÁöÑÂàóÂêçÂàóË°®ÔºåÈªòËÆ§ÊòæÁ§∫ ['rank', 'symbol', 'name', 'price', 'market_cap']
        
        Returns:
            pd.DataFrame: Ê†ºÂºèÂåñÂêéÁöÑÊï∞ÊçÆÔºåÂàóÂêçÂ∑≤Êú¨Âú∞ÂåñÔºåÊï∞ÂÄºÂ∑≤Ê†ºÂºèÂåñ
            
        Examples:
            >>> displayer = CryptoDataDisplayer()
            >>> formatted_data = displayer.format_crypto_data(clean_data, ['rank', 'symbol', 'name', 'price'])
        """
        if columns is None:
            columns = ['rank', 'symbol', 'name', 'price', 'market_cap']
        
        # Â§ÑÁêÜÁ©∫Êï∞ÊçÆÊ°ÜÁöÑÊÉÖÂÜµ
        if data.empty:
            print("‚ö†Ô∏è  Ë≠¶ÂëäÔºöÊï∞ÊçÆ‰∏∫Á©∫ÔºåÊó†Ê≥ïÊ†ºÂºèÂåñ")
            return pd.DataFrame()
        
        # ÈÄâÊã©ÊòæÁ§∫Âàó
        available_columns = [col for col in columns if col in data.columns]
        if not available_columns:
            raise ValueError(f"Ê≤°ÊúâÊâæÂà∞ÊåáÂÆöÁöÑÂàó: {columns}")
            
        display_data = data[available_columns].copy()
        
        # ‰øÆÊ≠£Â∏ÅÁßçÂêçÁß∞
        if 'name' in display_data.columns:
            display_data['name'] = display_data['name'].replace(self.name_corrections)
        
        # Á¨¶Âè∑Â§ßÂÜôËΩ¨Êç¢
        if 'symbol' in display_data.columns:
            display_data['symbol'] = display_data['symbol'].str.upper()
        
        # Ê†ºÂºèÂåñÊï∞ÂÄºÂàó
        if 'price' in display_data.columns:
            display_data['price'] = display_data['price'].apply(lambda x: f"{x:,.4f}" if pd.notna(x) else "N/A")
        
        if 'market_cap' in display_data.columns:
            # Â∏ÇÂÄº‰ª•ÂçÅ‰∫øÁæéÂÖÉ‰∏∫Âçï‰ΩçÊòæÁ§∫ (1B$)Ôºå‰øùÊåÅÊï¥Êï∞‰∏éÂçÉÂàÜ‰Ωç
            display_data['market_cap'] = display_data['market_cap'].apply(
                lambda x: f"{x/1_000_000_000:,.0f}" if pd.notna(x) and x > 0 else "N/A"
            )
        
        if 'volume' in display_data.columns:
            display_data['volume'] = display_data['volume'].apply(
                lambda x: f"{x:,.0f}" if pd.notna(x) else "N/A"
            )
        
        # Ê†ºÂºèÂåñÁôæÂàÜÊØîÂàó
        # ÁôæÂàÜÊØîÂàóÊ†ºÂºèÂåñÔºöÊùÉÈáç‰∏çÂä†ÁôæÂàÜÂè∑ÔºåÂÖ∂ÂÆÉÊ∂®Ë∑åÂπÖ‰øùÁïôÁôæÂàÜÂè∑
        if 'weight' in display_data.columns:
            display_data['weight'] = display_data['weight'].apply(
                lambda x: f"{x:.2f}" if pd.notna(x) else "N/A"
            )
        for pct_col in [c for c in ['change_24h', 'change_7d'] if c in display_data.columns]:
            display_data[pct_col] = display_data[pct_col].apply(
                lambda x: f"{x:.2f}%" if pd.notna(x) else "N/A"
            )
        
        # Â∫îÁî®ÂàóÂêçÊò†Â∞ÑÔºàËã±ÊñáËΩ¨‰∏≠ÊñáÔºâ
        display_data = display_data.rename(columns=self.column_mapping)
        
        return display_data
    
    def show_table(self, data: pd.DataFrame,
                   columns: Optional[List[str]] = None,
                   top_n: Optional[int] = None,
                   title: Optional[str] = None,
                   page_size: int = 50,
                   show_info: bool = False) -> Optional[pd.DataFrame]:
        """Â±ïÁ§∫Ê†ºÂºèÂåñÁöÑÊï∞ÊçÆË°®Ê†º
        
        Êï¥ÂêàÊï∞ÊçÆÊ†ºÂºèÂåñÂíåË°®Ê†ºÊòæÁ§∫ÂäüËÉΩÔºåÊèê‰æõÂÆåÊï¥ÁöÑÂ±ïÁ§∫ÊµÅÁ®ãÔºö
        1. Êï∞ÊçÆÊ†ºÂºèÂåñ
        2. Ë°åÊï∞Á≠õÈÄâÔºàÂâçNË°åÔºâ
        3. Ë°®Ê†ºÊòæÁ§∫ÔºàJupyterÁéØÂ¢É‰ºòÂåñÔºâ
        4. Ê±áÊÄª‰ø°ÊÅØËæìÂá∫
        
        Args:
            data: Ë¶ÅÂ±ïÁ§∫ÁöÑÊï∞ÊçÆDataFrame
            columns: Ë¶ÅÊòæÁ§∫ÁöÑÂàóÂêçÂàóË°®
            top_n: ÊòæÁ§∫ÂâçNË°åÔºàÂú®ÂàÜÈ°µ‰πãÂâçË£ÅÂâ™ÔºâÔºõNone Ë°®Á§∫‰∏çË£ÅÂâ™
            title: Ë°®Ê†ºÊ†áÈ¢ò
            page_size: ÂàÜÈ°µÂ§ßÂ∞èÔºà‰ªÖ Jupyter ÊòæÁ§∫Êó∂ÁîüÊïàÔºâÔºõËã•Êï∞ÊçÆË°åÊï∞ > page_sizeÔºåÂàôÂàÜÈ°µ
            show_info: ÊòØÂê¶ÊòæÁ§∫Ë°åÊï∞ÊèêÁ§∫ÔºàÈªòËÆ§ÂÖ≥Èó≠Ôºå‰øùÊåÅËæìÂá∫ÊûÅÁÆÄÔºâ
        
        Returns:
            pd.DataFrame: Ê†ºÂºèÂåñÂêéÁöÑÂ±ïÁ§∫Êï∞ÊçÆ
            
        Examples:
            >>> displayer = CryptoDataDisplayer()
            >>> displayer.show_table(data, columns=['rank', 'symbol', 'name', 'price'], top_n=10)
        """
        if data.empty:
            print("‚ö†Ô∏è  Ê≤°ÊúâÊï∞ÊçÆÂèØÊòæÁ§∫")
            return pd.DataFrame()
        
        # Ê†ºÂºèÂåñÊï∞ÊçÆ
        formatted_data = self.format_crypto_data(data, columns)
        
        # Á≠õÈÄâÂâçNË°åÔºàÂ¶ÇÊûúÊåáÂÆöÔºâ
        if top_n is not None:
            display_subset = formatted_data.head(top_n)
        else:
            display_subset = formatted_data

        total_rows = len(display_subset)

        # Ê†áÈ¢ò
        if title:
            print(f"\nüìä {title}")
        if show_info:
            print(f"(rows={total_rows})")
        
        # Âú®JupyterÁéØÂ¢É‰∏≠‰ºòÂåñÊòæÁ§∫
        if IPYTHON_AVAILABLE:
            # ÂàÜÈ°µÊòæÁ§∫ÔºöËã•Ë°åÊï∞Ë∂ÖËøá page_sizeÔºåÂàÜÂùóÂ±ïÁ§∫
            if total_rows > page_size and page_size > 0:
                for start in range(0, total_rows, page_size):
                    end = min(start + page_size, total_rows)
                    if show_info:
                        print(f"Á¨¨ {start+1}-{end} Ë°å / ÂÖ± {total_rows} Ë°å")
                    display(display_subset.iloc[start:end])
            else:
                display(display_subset)
            # ËøîÂõûNoneÈÅøÂÖçJupyterËá™Âä®ÊòæÁ§∫ËøîÂõûÂÄº
            return None
        else:
            print(display_subset.to_string(index=False))
            return display_subset
